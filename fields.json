[
    {
        "MAX_BIGINT": 9223372036854775807,
        "attname": "id",
        "auto_created": true,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.id)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.BigAutoField: id>>",
        "check": "<bound method AutoFieldMixin.check of <django.db.models.fields.BigAutoField: id>>",
        "choices": null,
        "class_lookups": {
            "gte": "<class 'django.db.models.lookups.IntegerGreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.IntegerLessThan'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.BigAutoField: id>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.BigAutoField: id>>",
        "column": "id",
        "concrete": true,
        "contribute_to_class": "<bound method AutoFieldMixin.contribute_to_class of <django.db.models.fields.BigAutoField: id>>",
        "creation_counter": -21,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.BigAutoField: id>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.BigAutoField: id>>",
        "db_returning": true,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.BigAutoField: id>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.BigAutoField: id>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.BigAutoField: id>>",
        "deconstruct": "<bound method AutoFieldMixin.deconstruct of <django.db.models.fields.BigAutoField: id>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "default_validators": [],
        "description": "Big (8 byte) integer",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "flatchoices": [],
        "formfield": "<bound method AutoFieldMixin.formfield of <django.db.models.fields.BigAutoField: id>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.BigAutoField: id>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.BigAutoField: id>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.BigAutoField: id>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.BigAutoField: id>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.BigAutoField: id>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.BigAutoField: id>>",
        "get_db_prep_value": "<bound method AutoFieldMixin.get_db_prep_value of <django.db.models.fields.BigAutoField: id>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.BigAutoField: id>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.BigAutoField: id>>",
        "get_internal_type": "<bound method BigAutoField.get_internal_type of <django.db.models.fields.BigAutoField: id>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.BigAutoField: id>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.BigAutoField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.BigAutoField: id>>",
        "get_prep_value": "<bound method IntegerField.get_prep_value of <django.db.models.fields.BigAutoField: id>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.BigAutoField: id>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.BigAutoField: id>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "id",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": false,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.BigAutoField: id>>",
        "primary_key": true,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.BigAutoField'>>",
        "rel_db_type": "<bound method BigAutoField.rel_db_type of <django.db.models.fields.BigAutoField: id>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.BigAutoField: id>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.BigAutoField: id>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.BigAutoField: id>>",
        "serialize": false,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.BigAutoField: id>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method IntegerField.to_python of <django.db.models.fields.BigAutoField: id>>",
        "unique": true,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method AutoFieldMixin.validate of <django.db.models.fields.BigAutoField: id>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.BigAutoField: id>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.BigAutoField: id>>",
        "verbose_name": "ID"
    },
    {
        "attname": "family_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.family_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: family_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: family_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: family_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: family_no>>",
        "column": "family_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: family_no>>",
        "creation_counter": 159,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: family_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: family_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: family_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: family_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: family_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: family_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: family_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: family_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: family_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: family_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: family_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: family_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: family_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: family_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: family_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: family_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: family_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: family_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: family_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: family_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: family_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: family_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "family_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: family_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: family_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: family_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: family_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: family_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: family_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: family_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: family_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10250>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: family_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: family_no>>",
        "verbose_name": "family no"
    },
    {
        "attname": "internal_title",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": false,
        "cached_col": "Col(app_family, app.Family.internal_title)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: internal_title>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: internal_title>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: internal_title>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: internal_title>>",
        "column": "internal_title",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: internal_title>>",
        "creation_counter": 160,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: internal_title>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: internal_title>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: internal_title>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: internal_title>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: internal_title>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: internal_title>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: internal_title>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: internal_title>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: internal_title>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: internal_title>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: internal_title>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: internal_title>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: internal_title>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: internal_title>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: internal_title>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: internal_title>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: internal_title>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: internal_title>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: internal_title>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: internal_title>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: internal_title>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: internal_title>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "internal_title",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": false,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: internal_title>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: internal_title>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: internal_title>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: internal_title>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: internal_title>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: internal_title>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: internal_title>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: internal_title>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10310>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: internal_title>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: internal_title>>",
        "verbose_name": "internal title"
    },
    {
        "attname": "formal_title",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.formal_title)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: formal_title>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: formal_title>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: formal_title>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: formal_title>>",
        "column": "formal_title",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: formal_title>>",
        "creation_counter": 161,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: formal_title>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: formal_title>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: formal_title>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: formal_title>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: formal_title>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: formal_title>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: formal_title>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: formal_title>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: formal_title>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: formal_title>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: formal_title>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: formal_title>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: formal_title>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: formal_title>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: formal_title>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: formal_title>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: formal_title>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: formal_title>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: formal_title>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: formal_title>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: formal_title>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: formal_title>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "formal_title",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: formal_title>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: formal_title>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: formal_title>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: formal_title>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: formal_title>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: formal_title>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: formal_title>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: formal_title>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A103D0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: formal_title>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: formal_title>>",
        "verbose_name": "formal title"
    },
    {
        "attname": "status",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.status)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: status>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: status>>",
        "choices": [
            [
                "Open",
                "Open"
            ],
            [
                "Pending",
                "Pending"
            ],
            [
                "Filed",
                "Filed"
            ],
            [
                "Abandoned",
                "Abandoned"
            ],
            [
                "Sold",
                "Sold"
            ],
            [
                "Licenced",
                "Licenced"
            ],
            [
                "OnHold",
                "OnHold"
            ],
            [
                "Opposed",
                "Opposed"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: status>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: status>>",
        "column": "status",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: status>>",
        "creation_counter": 162,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: status>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: status>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: status>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: status>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: status>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: status>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Open",
                "Open"
            ],
            [
                "Pending",
                "Pending"
            ],
            [
                "Filed",
                "Filed"
            ],
            [
                "Abandoned",
                "Abandoned"
            ],
            [
                "Sold",
                "Sold"
            ],
            [
                "Licenced",
                "Licenced"
            ],
            [
                "OnHold",
                "OnHold"
            ],
            [
                "Opposed",
                "Opposed"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: status>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: status>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: status>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: status>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: status>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: status>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: status>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: status>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: status>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: status>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: status>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: status>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: status>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: status>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: status>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: status>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "status",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: status>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: status>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: status>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: status>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: status>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: status>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: status>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: status>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10490>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: status>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: status>>",
        "verbose_name": "status"
    },
    {
        "attname": "sub_status",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.sub_status)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: sub_status>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: sub_status>>",
        "choices": [
            [
                "Open",
                "Open"
            ],
            [
                "Pending",
                "Pending"
            ],
            [
                "Filed",
                "Filed"
            ],
            [
                "Abandoned",
                "Abandoned"
            ],
            [
                "Sold",
                "Sold"
            ],
            [
                "Licenced",
                "Licenced"
            ],
            [
                "OnHold",
                "OnHold"
            ],
            [
                "Opposed",
                "Opposed"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: sub_status>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: sub_status>>",
        "column": "sub_status",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: sub_status>>",
        "creation_counter": 163,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: sub_status>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: sub_status>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: sub_status>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: sub_status>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: sub_status>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: sub_status>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Open",
                "Open"
            ],
            [
                "Pending",
                "Pending"
            ],
            [
                "Filed",
                "Filed"
            ],
            [
                "Abandoned",
                "Abandoned"
            ],
            [
                "Sold",
                "Sold"
            ],
            [
                "Licenced",
                "Licenced"
            ],
            [
                "OnHold",
                "OnHold"
            ],
            [
                "Opposed",
                "Opposed"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: sub_status>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: sub_status>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: sub_status>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: sub_status>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: sub_status>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: sub_status>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: sub_status>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: sub_status>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: sub_status>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: sub_status>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: sub_status>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: sub_status>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: sub_status>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: sub_status>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: sub_status>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: sub_status>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "sub_status",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: sub_status>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: sub_status>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: sub_status>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: sub_status>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: sub_status>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: sub_status>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: sub_status>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: sub_status>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10550>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: sub_status>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: sub_status>>",
        "verbose_name": "sub status"
    },
    {
        "attname": "type_of_filing",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.type_of_filing)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: type_of_filing>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: type_of_filing>>",
        "choices": [
            [
                "Open",
                "Open"
            ],
            [
                "Pending",
                "Pending"
            ],
            [
                "Filed",
                "Filed"
            ],
            [
                "Abandoned",
                "Abandoned"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: type_of_filing>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: type_of_filing>>",
        "column": "type_of_filing",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: type_of_filing>>",
        "creation_counter": 164,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: type_of_filing>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: type_of_filing>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: type_of_filing>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: type_of_filing>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: type_of_filing>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: type_of_filing>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Open",
                "Open"
            ],
            [
                "Pending",
                "Pending"
            ],
            [
                "Filed",
                "Filed"
            ],
            [
                "Abandoned",
                "Abandoned"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: type_of_filing>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: type_of_filing>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: type_of_filing>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: type_of_filing>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: type_of_filing>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: type_of_filing>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: type_of_filing>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: type_of_filing>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: type_of_filing>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: type_of_filing>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: type_of_filing>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: type_of_filing>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: type_of_filing>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: type_of_filing>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: type_of_filing>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: type_of_filing>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "type_of_filing",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: type_of_filing>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: type_of_filing>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: type_of_filing>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: type_of_filing>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: type_of_filing>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: type_of_filing>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: type_of_filing>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: type_of_filing>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10610>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: type_of_filing>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: type_of_filing>>",
        "verbose_name": "type of filing"
    },
    {
        "attname": "sub_filing",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.sub_filing)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: sub_filing>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: sub_filing>>",
        "choices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: sub_filing>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: sub_filing>>",
        "column": "sub_filing",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: sub_filing>>",
        "creation_counter": 165,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: sub_filing>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: sub_filing>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: sub_filing>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: sub_filing>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: sub_filing>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: sub_filing>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: sub_filing>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: sub_filing>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: sub_filing>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: sub_filing>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: sub_filing>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: sub_filing>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: sub_filing>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: sub_filing>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: sub_filing>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: sub_filing>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: sub_filing>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: sub_filing>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: sub_filing>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: sub_filing>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: sub_filing>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: sub_filing>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "sub_filing",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: sub_filing>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: sub_filing>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: sub_filing>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: sub_filing>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: sub_filing>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: sub_filing>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: sub_filing>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: sub_filing>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A106D0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: sub_filing>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: sub_filing>>",
        "verbose_name": "sub filing"
    },
    {
        "attname": "attorney_1_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.attorney_1)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "column": "attorney_1_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "creation_counter": 166,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Attorney.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Family.attorney_1"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "attorney_1",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.family",
        "path_infos": [
            [
                "app.family",
                "app.attorney",
                [
                    "app.Attorney.contact_ptr"
                ],
                "app.Family.attorney_1",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Family.attorney_1",
                "app.Attorney.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Attorney'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "remote_field": "<ManyToOneRel: app.family>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "reverse_path_infos": [
            [
                "app.attorney",
                "app.family",
                [
                    "app.Family.id"
                ],
                "<ManyToOneRel: app.family>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Attorney.contact_ptr",
                "app.Family.attorney_1"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Attorney.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: attorney_1>>",
        "verbose_name": "attorney 1"
    },
    {
        "attname": "attorney_2_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.attorney_2)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "column": "attorney_2_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "creation_counter": 167,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Attorney.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Family.attorney_2"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "attorney_2",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.family",
        "path_infos": [
            [
                "app.family",
                "app.attorney",
                [
                    "app.Attorney.contact_ptr"
                ],
                "app.Family.attorney_2",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Family.attorney_2",
                "app.Attorney.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Attorney'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "remote_field": "<ManyToOneRel: app.family>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "reverse_path_infos": [
            [
                "app.attorney",
                "app.family",
                [
                    "app.Family.id"
                ],
                "<ManyToOneRel: app.family>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Attorney.contact_ptr",
                "app.Family.attorney_2"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Attorney.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: attorney_2>>",
        "verbose_name": "attorney 2"
    },
    {
        "attname": "paralegal_1_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.paralegal_1)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "column": "paralegal_1_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "creation_counter": 168,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Paralegal.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Family.paralegal_1"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "paralegal_1",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.family",
        "path_infos": [
            [
                "app.family",
                "app.paralegal",
                [
                    "app.Paralegal.contact_ptr"
                ],
                "app.Family.paralegal_1",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Family.paralegal_1",
                "app.Paralegal.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Paralegal'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "remote_field": "<ManyToOneRel: app.family>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "reverse_path_infos": [
            [
                "app.paralegal",
                "app.family",
                [
                    "app.Family.id"
                ],
                "<ManyToOneRel: app.family>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Paralegal.contact_ptr",
                "app.Family.paralegal_1"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Paralegal.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: paralegal_1>>",
        "verbose_name": "paralegal 1"
    },
    {
        "attname": "paralegal_2_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.paralegal_2)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "column": "paralegal_2_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "creation_counter": 169,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Paralegal.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Family.paralegal_2"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "paralegal_2",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.family",
        "path_infos": [
            [
                "app.family",
                "app.paralegal",
                [
                    "app.Paralegal.contact_ptr"
                ],
                "app.Family.paralegal_2",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Family.paralegal_2",
                "app.Paralegal.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Paralegal'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "remote_field": "<ManyToOneRel: app.family>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "reverse_path_infos": [
            [
                "app.paralegal",
                "app.family",
                [
                    "app.Family.id"
                ],
                "<ManyToOneRel: app.family>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Paralegal.contact_ptr",
                "app.Family.paralegal_2"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Paralegal.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: paralegal_2>>",
        "verbose_name": "paralegal 2"
    },
    {
        "attname": "licenced",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.licenced)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: licenced>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: licenced>>",
        "choices": [
            [
                "Yes",
                "Yes"
            ],
            [
                "No",
                "No"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: licenced>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: licenced>>",
        "column": "licenced",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: licenced>>",
        "creation_counter": 170,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: licenced>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: licenced>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: licenced>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: licenced>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: licenced>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: licenced>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Yes",
                "Yes"
            ],
            [
                "No",
                "No"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: licenced>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: licenced>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: licenced>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: licenced>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: licenced>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: licenced>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: licenced>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: licenced>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: licenced>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: licenced>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: licenced>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: licenced>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: licenced>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: licenced>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: licenced>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: licenced>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 4,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "licenced",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: licenced>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: licenced>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: licenced>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: licenced>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: licenced>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: licenced>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: licenced>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: licenced>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10910>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: licenced>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: licenced>>",
        "verbose_name": "licenced"
    },
    {
        "attname": "licensor_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.licensor)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: licensor>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: licensor>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: licensor>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: licensor>>",
        "column": "licensor_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: licensor>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: licensor>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: licensor>>",
        "creation_counter": 171,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: licensor>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: licensor>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: licensor>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: licensor>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: licensor>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: licensor>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: licensor>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: licensor>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Licensor.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: licensor>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: licensor>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: licensor>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: licensor>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: licensor>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Family.licensor"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "licensor",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.family",
        "path_infos": [
            [
                "app.family",
                "app.licensor",
                [
                    "app.Licensor.contact_ptr"
                ],
                "app.Family.licensor",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: licensor>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: licensor>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Family.licensor",
                "app.Licensor.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Licensor'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: licensor>>",
        "remote_field": "<ManyToOneRel: app.family>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: licensor>>",
        "reverse_path_infos": [
            [
                "app.licensor",
                "app.family",
                [
                    "app.Family.id"
                ],
                "<ManyToOneRel: app.family>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Licensor.contact_ptr",
                "app.Family.licensor"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: licensor>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: licensor>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: licensor>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: licensor>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: licensor>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: licensor>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Licensor.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: licensor>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: licensor>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: licensor>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: licensor>>",
        "verbose_name": "licensor"
    },
    {
        "attname": "cost_centre",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.cost_centre)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: cost_centre>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: cost_centre>>",
        "choices": [
            [
                "Cost -1",
                "Cost -1"
            ],
            [
                "Cost -2",
                "Cost -2"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: cost_centre>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: cost_centre>>",
        "column": "cost_centre",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: cost_centre>>",
        "creation_counter": 172,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: cost_centre>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: cost_centre>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: cost_centre>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: cost_centre>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: cost_centre>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: cost_centre>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Cost -1",
                "Cost -1"
            ],
            [
                "Cost -2",
                "Cost -2"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: cost_centre>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: cost_centre>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: cost_centre>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: cost_centre>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: cost_centre>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: cost_centre>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: cost_centre>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: cost_centre>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: cost_centre>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: cost_centre>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: cost_centre>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: cost_centre>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: cost_centre>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: cost_centre>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: cost_centre>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: cost_centre>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "cost_centre",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: cost_centre>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: cost_centre>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: cost_centre>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: cost_centre>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: cost_centre>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: cost_centre>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: cost_centre>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: cost_centre>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10A30>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: cost_centre>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: cost_centre>>",
        "verbose_name": "cost centre"
    },
    {
        "attname": "cost_centre_code",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.cost_centre_code)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: cost_centre_code>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: cost_centre_code>>",
        "choices": [
            [
                "Applicant 1",
                "Applicant 1"
            ],
            [
                "Applicant 2",
                "Applicant 2"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: cost_centre_code>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: cost_centre_code>>",
        "column": "cost_centre_code",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: cost_centre_code>>",
        "creation_counter": 173,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: cost_centre_code>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: cost_centre_code>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: cost_centre_code>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: cost_centre_code>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: cost_centre_code>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: cost_centre_code>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Applicant 1",
                "Applicant 1"
            ],
            [
                "Applicant 2",
                "Applicant 2"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: cost_centre_code>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: cost_centre_code>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: cost_centre_code>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "cost_centre_code",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: cost_centre_code>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: cost_centre_code>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: cost_centre_code>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: cost_centre_code>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: cost_centre_code>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: cost_centre_code>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: cost_centre_code>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: cost_centre_code>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10AF0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: cost_centre_code>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: cost_centre_code>>",
        "verbose_name": "cost centre code"
    },
    {
        "attname": "keywords",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_family, app.Family.keywords)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: keywords>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: keywords>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: keywords>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: keywords>>",
        "column": "keywords",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: keywords>>",
        "creation_counter": 174,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: keywords>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: keywords>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: keywords>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: keywords>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: keywords>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: keywords>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: keywords>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: keywords>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: keywords>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: keywords>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: keywords>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: keywords>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: keywords>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: keywords>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: keywords>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: keywords>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: keywords>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: keywords>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: keywords>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: keywords>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: keywords>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: keywords>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Family'>",
        "name": "keywords",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: keywords>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: keywords>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: keywords>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: keywords>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: keywords>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: keywords>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: keywords>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: keywords>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A10BB0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: keywords>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: keywords>>",
        "verbose_name": "keywords"
    },
    {
        "attname": "case_ref_docket_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.case_ref_docket_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "column": "case_ref_docket_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "creation_counter": 175,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "case_ref_docket_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12110>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: case_ref_docket_no>>",
        "verbose_name": "Case Ref. / Docket No"
    },
    {
        "attname": "country",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.country)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: country>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: country>>",
        "choices": [
            [
                "AF",
                "AF"
            ],
            [
                "AX",
                "AX"
            ],
            [
                "AL",
                "AL"
            ],
            [
                "DZ",
                "DZ"
            ],
            [
                "AS",
                "AS"
            ],
            [
                "AD",
                "AD"
            ],
            [
                "AO",
                "AO"
            ],
            [
                "AI",
                "AI"
            ],
            [
                "AQ",
                "AQ"
            ],
            [
                "AG",
                "AG"
            ],
            [
                "AR",
                "AR"
            ],
            [
                "AM",
                "AM"
            ],
            [
                "AW",
                "AW"
            ],
            [
                "AU",
                "AU"
            ],
            [
                "AT",
                "AT"
            ],
            [
                "AZ",
                "AZ"
            ],
            [
                "BS",
                "BS"
            ],
            [
                "BH",
                "BH"
            ],
            [
                "BD",
                "BD"
            ],
            [
                "BB",
                "BB"
            ],
            [
                "BY",
                "BY"
            ],
            [
                "BE",
                "BE"
            ],
            [
                "BZ",
                "BZ"
            ],
            [
                "BJ",
                "BJ"
            ],
            [
                "BM",
                "BM"
            ],
            [
                "BT",
                "BT"
            ],
            [
                "BO",
                "BO"
            ],
            [
                "BQ",
                "BQ"
            ],
            [
                "BA",
                "BA"
            ],
            [
                "BW",
                "BW"
            ],
            [
                "BV",
                "BV"
            ],
            [
                "BR",
                "BR"
            ],
            [
                "IO",
                "IO"
            ],
            [
                "BN",
                "BN"
            ],
            [
                "BG",
                "BG"
            ],
            [
                "BF",
                "BF"
            ],
            [
                "BI",
                "BI"
            ],
            [
                "KH",
                "KH"
            ],
            [
                "CM",
                "CM"
            ],
            [
                "CA",
                "CA"
            ],
            [
                "CV",
                "CV"
            ],
            [
                "KY",
                "KY"
            ],
            [
                "CF",
                "CF"
            ],
            [
                "TD",
                "TD"
            ],
            [
                "CL",
                "CL"
            ],
            [
                "CN",
                "CN"
            ],
            [
                "CX",
                "CX"
            ],
            [
                "CC",
                "CC"
            ],
            [
                "CO",
                "CO"
            ],
            [
                "KM",
                "KM"
            ],
            [
                "CG",
                "CG"
            ],
            [
                "CD",
                "CD"
            ],
            [
                "CK",
                "CK"
            ],
            [
                "CR",
                "CR"
            ],
            [
                "CI",
                "CI"
            ],
            [
                "HR",
                "HR"
            ],
            [
                "CU",
                "CU"
            ],
            [
                "CW",
                "CW"
            ],
            [
                "CY",
                "CY"
            ],
            [
                "CZ",
                "CZ"
            ],
            [
                "DK",
                "DK"
            ],
            [
                "DJ",
                "DJ"
            ],
            [
                "DM",
                "DM"
            ],
            [
                "DO",
                "DO"
            ],
            [
                "EC",
                "EC"
            ],
            [
                "EG",
                "EG"
            ],
            [
                "SV",
                "SV"
            ],
            [
                "GQ",
                "GQ"
            ],
            [
                "ER",
                "ER"
            ],
            [
                "EE",
                "EE"
            ],
            [
                "ET",
                "ET"
            ],
            [
                "FK",
                "FK"
            ],
            [
                "FO",
                "FO"
            ],
            [
                "FJ",
                "FJ"
            ],
            [
                "FI",
                "FI"
            ],
            [
                "FR",
                "FR"
            ],
            [
                "GF",
                "GF"
            ],
            [
                "PF",
                "PF"
            ],
            [
                "TF",
                "TF"
            ],
            [
                "GA",
                "GA"
            ],
            [
                "GM",
                "GM"
            ],
            [
                "GE",
                "GE"
            ],
            [
                "DE",
                "DE"
            ],
            [
                "GH",
                "GH"
            ],
            [
                "GI",
                "GI"
            ],
            [
                "GR",
                "GR"
            ],
            [
                "GL",
                "GL"
            ],
            [
                "GD",
                "GD"
            ],
            [
                "GP",
                "GP"
            ],
            [
                "GU",
                "GU"
            ],
            [
                "GT",
                "GT"
            ],
            [
                "GG",
                "GG"
            ],
            [
                "GN",
                "GN"
            ],
            [
                "GW",
                "GW"
            ],
            [
                "GY",
                "GY"
            ],
            [
                "HT",
                "HT"
            ],
            [
                "HM",
                "HM"
            ],
            [
                "VA",
                "VA"
            ],
            [
                "HN",
                "HN"
            ],
            [
                "HK",
                "HK"
            ],
            [
                "HU",
                "HU"
            ],
            [
                "IS",
                "IS"
            ],
            [
                "IN",
                "IN"
            ],
            [
                "ID",
                "ID"
            ],
            [
                "IR",
                "IR"
            ],
            [
                "IQ",
                "IQ"
            ],
            [
                "IE",
                "IE"
            ],
            [
                "IM",
                "IM"
            ],
            [
                "IL",
                "IL"
            ],
            [
                "IT",
                "IT"
            ],
            [
                "JM",
                "JM"
            ],
            [
                "JP",
                "JP"
            ],
            [
                "JE",
                "JE"
            ],
            [
                "JO",
                "JO"
            ],
            [
                "KZ",
                "KZ"
            ],
            [
                "KE",
                "KE"
            ],
            [
                "KI",
                "KI"
            ],
            [
                "KP",
                "KP"
            ],
            [
                "KR",
                "KR"
            ],
            [
                "KW",
                "KW"
            ],
            [
                "KG",
                "KG"
            ],
            [
                "LA",
                "LA"
            ],
            [
                "LV",
                "LV"
            ],
            [
                "LB",
                "LB"
            ],
            [
                "LS",
                "LS"
            ],
            [
                "LR",
                "LR"
            ],
            [
                "LY",
                "LY"
            ],
            [
                "LI",
                "LI"
            ],
            [
                "LT",
                "LT"
            ],
            [
                "LU",
                "LU"
            ],
            [
                "MO",
                "MO"
            ],
            [
                "MK",
                "MK"
            ],
            [
                "MG",
                "MG"
            ],
            [
                "MW",
                "MW"
            ],
            [
                "MY",
                "MY"
            ],
            [
                "MV",
                "MV"
            ],
            [
                "ML",
                "ML"
            ],
            [
                "MT",
                "MT"
            ],
            [
                "MH",
                "MH"
            ],
            [
                "MQ",
                "MQ"
            ],
            [
                "MR",
                "MR"
            ],
            [
                "MU",
                "MU"
            ],
            [
                "YT",
                "YT"
            ],
            [
                "MX",
                "MX"
            ],
            [
                "FM",
                "FM"
            ],
            [
                "MD",
                "MD"
            ],
            [
                "MC",
                "MC"
            ],
            [
                "MN",
                "MN"
            ],
            [
                "ME",
                "ME"
            ],
            [
                "MS",
                "MS"
            ],
            [
                "MA",
                "MA"
            ],
            [
                "MZ",
                "MZ"
            ],
            [
                "MM",
                "MM"
            ],
            [
                "NA",
                "NA"
            ],
            [
                "NR",
                "NR"
            ],
            [
                "NP",
                "NP"
            ],
            [
                "NL",
                "NL"
            ],
            [
                "NC",
                "NC"
            ],
            [
                "NZ",
                "NZ"
            ],
            [
                "NI",
                "NI"
            ],
            [
                "NE",
                "NE"
            ],
            [
                "NG",
                "NG"
            ],
            [
                "NU",
                "NU"
            ],
            [
                "NF",
                "NF"
            ],
            [
                "MP",
                "MP"
            ],
            [
                "NO",
                "NO"
            ],
            [
                "OM",
                "OM"
            ],
            [
                "PK",
                "PK"
            ],
            [
                "PW",
                "PW"
            ],
            [
                "PS",
                "PS"
            ],
            [
                "PA",
                "PA"
            ],
            [
                "PG",
                "PG"
            ],
            [
                "PY",
                "PY"
            ],
            [
                "PE",
                "PE"
            ],
            [
                "PH",
                "PH"
            ],
            [
                "PN",
                "PN"
            ],
            [
                "PL",
                "PL"
            ],
            [
                "PT",
                "PT"
            ],
            [
                "PR",
                "PR"
            ],
            [
                "QA",
                "QA"
            ],
            [
                "RE",
                "RE"
            ],
            [
                "RO",
                "RO"
            ],
            [
                "RU",
                "RU"
            ],
            [
                "RW",
                "RW"
            ],
            [
                "BL",
                "BL"
            ],
            [
                "SH",
                "SH"
            ],
            [
                "KN",
                "KN"
            ],
            [
                "LC",
                "LC"
            ],
            [
                "MF",
                "MF"
            ],
            [
                "PM",
                "PM"
            ],
            [
                "VC",
                "VC"
            ],
            [
                "WS",
                "WS"
            ],
            [
                "SM",
                "SM"
            ],
            [
                "ST",
                "ST"
            ],
            [
                "SA",
                "SA"
            ],
            [
                "SN",
                "SN"
            ],
            [
                "RS",
                "RS"
            ],
            [
                "SC",
                "SC"
            ],
            [
                "SL",
                "SL"
            ],
            [
                "SG",
                "SG"
            ],
            [
                "SX",
                "SX"
            ],
            [
                "SK",
                "SK"
            ],
            [
                "SI",
                "SI"
            ],
            [
                "SB",
                "SB"
            ],
            [
                "SO",
                "SO"
            ],
            [
                "ZA",
                "ZA"
            ],
            [
                "GS",
                "GS"
            ],
            [
                "SS",
                "SS"
            ],
            [
                "ES",
                "ES"
            ],
            [
                "LK",
                "LK"
            ],
            [
                "SD",
                "SD"
            ],
            [
                "SR",
                "SR"
            ],
            [
                "SJ",
                "SJ"
            ],
            [
                "SZ",
                "SZ"
            ],
            [
                "SE",
                "SE"
            ],
            [
                "CH",
                "CH"
            ],
            [
                "SY",
                "SY"
            ],
            [
                "TW",
                "TW"
            ],
            [
                "TJ",
                "TJ"
            ],
            [
                "TZ",
                "TZ"
            ],
            [
                "TH",
                "TH"
            ],
            [
                "TL",
                "TL"
            ],
            [
                "TG",
                "TG"
            ],
            [
                "TK",
                "TK"
            ],
            [
                "TO",
                "TO"
            ],
            [
                "TT",
                "TT"
            ],
            [
                "TN",
                "TN"
            ],
            [
                "TR",
                "TR"
            ],
            [
                "TM",
                "TM"
            ],
            [
                "TC",
                "TC"
            ],
            [
                "TV",
                "TV"
            ],
            [
                "UG",
                "UG"
            ],
            [
                "UA",
                "UA"
            ],
            [
                "AE",
                "AE"
            ],
            [
                "GB",
                "GB"
            ],
            [
                "US",
                "US"
            ],
            [
                "UM",
                "UM"
            ],
            [
                "UY",
                "UY"
            ],
            [
                "UZ",
                "UZ"
            ],
            [
                "VU",
                "VU"
            ],
            [
                "VE",
                "VE"
            ],
            [
                "VN",
                "VN"
            ],
            [
                "VG",
                "VG"
            ],
            [
                "VI",
                "VI"
            ],
            [
                "WF",
                "WF"
            ],
            [
                "EH",
                "EH"
            ],
            [
                "YE",
                "YE"
            ],
            [
                "ZM",
                "ZM"
            ],
            [
                "ZW",
                "ZW"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: country>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: country>>",
        "column": "country",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: country>>",
        "creation_counter": 176,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: country>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: country>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: country>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: country>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: country>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: country>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "AF",
                "AF"
            ],
            [
                "AX",
                "AX"
            ],
            [
                "AL",
                "AL"
            ],
            [
                "DZ",
                "DZ"
            ],
            [
                "AS",
                "AS"
            ],
            [
                "AD",
                "AD"
            ],
            [
                "AO",
                "AO"
            ],
            [
                "AI",
                "AI"
            ],
            [
                "AQ",
                "AQ"
            ],
            [
                "AG",
                "AG"
            ],
            [
                "AR",
                "AR"
            ],
            [
                "AM",
                "AM"
            ],
            [
                "AW",
                "AW"
            ],
            [
                "AU",
                "AU"
            ],
            [
                "AT",
                "AT"
            ],
            [
                "AZ",
                "AZ"
            ],
            [
                "BS",
                "BS"
            ],
            [
                "BH",
                "BH"
            ],
            [
                "BD",
                "BD"
            ],
            [
                "BB",
                "BB"
            ],
            [
                "BY",
                "BY"
            ],
            [
                "BE",
                "BE"
            ],
            [
                "BZ",
                "BZ"
            ],
            [
                "BJ",
                "BJ"
            ],
            [
                "BM",
                "BM"
            ],
            [
                "BT",
                "BT"
            ],
            [
                "BO",
                "BO"
            ],
            [
                "BQ",
                "BQ"
            ],
            [
                "BA",
                "BA"
            ],
            [
                "BW",
                "BW"
            ],
            [
                "BV",
                "BV"
            ],
            [
                "BR",
                "BR"
            ],
            [
                "IO",
                "IO"
            ],
            [
                "BN",
                "BN"
            ],
            [
                "BG",
                "BG"
            ],
            [
                "BF",
                "BF"
            ],
            [
                "BI",
                "BI"
            ],
            [
                "KH",
                "KH"
            ],
            [
                "CM",
                "CM"
            ],
            [
                "CA",
                "CA"
            ],
            [
                "CV",
                "CV"
            ],
            [
                "KY",
                "KY"
            ],
            [
                "CF",
                "CF"
            ],
            [
                "TD",
                "TD"
            ],
            [
                "CL",
                "CL"
            ],
            [
                "CN",
                "CN"
            ],
            [
                "CX",
                "CX"
            ],
            [
                "CC",
                "CC"
            ],
            [
                "CO",
                "CO"
            ],
            [
                "KM",
                "KM"
            ],
            [
                "CG",
                "CG"
            ],
            [
                "CD",
                "CD"
            ],
            [
                "CK",
                "CK"
            ],
            [
                "CR",
                "CR"
            ],
            [
                "CI",
                "CI"
            ],
            [
                "HR",
                "HR"
            ],
            [
                "CU",
                "CU"
            ],
            [
                "CW",
                "CW"
            ],
            [
                "CY",
                "CY"
            ],
            [
                "CZ",
                "CZ"
            ],
            [
                "DK",
                "DK"
            ],
            [
                "DJ",
                "DJ"
            ],
            [
                "DM",
                "DM"
            ],
            [
                "DO",
                "DO"
            ],
            [
                "EC",
                "EC"
            ],
            [
                "EG",
                "EG"
            ],
            [
                "SV",
                "SV"
            ],
            [
                "GQ",
                "GQ"
            ],
            [
                "ER",
                "ER"
            ],
            [
                "EE",
                "EE"
            ],
            [
                "ET",
                "ET"
            ],
            [
                "FK",
                "FK"
            ],
            [
                "FO",
                "FO"
            ],
            [
                "FJ",
                "FJ"
            ],
            [
                "FI",
                "FI"
            ],
            [
                "FR",
                "FR"
            ],
            [
                "GF",
                "GF"
            ],
            [
                "PF",
                "PF"
            ],
            [
                "TF",
                "TF"
            ],
            [
                "GA",
                "GA"
            ],
            [
                "GM",
                "GM"
            ],
            [
                "GE",
                "GE"
            ],
            [
                "DE",
                "DE"
            ],
            [
                "GH",
                "GH"
            ],
            [
                "GI",
                "GI"
            ],
            [
                "GR",
                "GR"
            ],
            [
                "GL",
                "GL"
            ],
            [
                "GD",
                "GD"
            ],
            [
                "GP",
                "GP"
            ],
            [
                "GU",
                "GU"
            ],
            [
                "GT",
                "GT"
            ],
            [
                "GG",
                "GG"
            ],
            [
                "GN",
                "GN"
            ],
            [
                "GW",
                "GW"
            ],
            [
                "GY",
                "GY"
            ],
            [
                "HT",
                "HT"
            ],
            [
                "HM",
                "HM"
            ],
            [
                "VA",
                "VA"
            ],
            [
                "HN",
                "HN"
            ],
            [
                "HK",
                "HK"
            ],
            [
                "HU",
                "HU"
            ],
            [
                "IS",
                "IS"
            ],
            [
                "IN",
                "IN"
            ],
            [
                "ID",
                "ID"
            ],
            [
                "IR",
                "IR"
            ],
            [
                "IQ",
                "IQ"
            ],
            [
                "IE",
                "IE"
            ],
            [
                "IM",
                "IM"
            ],
            [
                "IL",
                "IL"
            ],
            [
                "IT",
                "IT"
            ],
            [
                "JM",
                "JM"
            ],
            [
                "JP",
                "JP"
            ],
            [
                "JE",
                "JE"
            ],
            [
                "JO",
                "JO"
            ],
            [
                "KZ",
                "KZ"
            ],
            [
                "KE",
                "KE"
            ],
            [
                "KI",
                "KI"
            ],
            [
                "KP",
                "KP"
            ],
            [
                "KR",
                "KR"
            ],
            [
                "KW",
                "KW"
            ],
            [
                "KG",
                "KG"
            ],
            [
                "LA",
                "LA"
            ],
            [
                "LV",
                "LV"
            ],
            [
                "LB",
                "LB"
            ],
            [
                "LS",
                "LS"
            ],
            [
                "LR",
                "LR"
            ],
            [
                "LY",
                "LY"
            ],
            [
                "LI",
                "LI"
            ],
            [
                "LT",
                "LT"
            ],
            [
                "LU",
                "LU"
            ],
            [
                "MO",
                "MO"
            ],
            [
                "MK",
                "MK"
            ],
            [
                "MG",
                "MG"
            ],
            [
                "MW",
                "MW"
            ],
            [
                "MY",
                "MY"
            ],
            [
                "MV",
                "MV"
            ],
            [
                "ML",
                "ML"
            ],
            [
                "MT",
                "MT"
            ],
            [
                "MH",
                "MH"
            ],
            [
                "MQ",
                "MQ"
            ],
            [
                "MR",
                "MR"
            ],
            [
                "MU",
                "MU"
            ],
            [
                "YT",
                "YT"
            ],
            [
                "MX",
                "MX"
            ],
            [
                "FM",
                "FM"
            ],
            [
                "MD",
                "MD"
            ],
            [
                "MC",
                "MC"
            ],
            [
                "MN",
                "MN"
            ],
            [
                "ME",
                "ME"
            ],
            [
                "MS",
                "MS"
            ],
            [
                "MA",
                "MA"
            ],
            [
                "MZ",
                "MZ"
            ],
            [
                "MM",
                "MM"
            ],
            [
                "NA",
                "NA"
            ],
            [
                "NR",
                "NR"
            ],
            [
                "NP",
                "NP"
            ],
            [
                "NL",
                "NL"
            ],
            [
                "NC",
                "NC"
            ],
            [
                "NZ",
                "NZ"
            ],
            [
                "NI",
                "NI"
            ],
            [
                "NE",
                "NE"
            ],
            [
                "NG",
                "NG"
            ],
            [
                "NU",
                "NU"
            ],
            [
                "NF",
                "NF"
            ],
            [
                "MP",
                "MP"
            ],
            [
                "NO",
                "NO"
            ],
            [
                "OM",
                "OM"
            ],
            [
                "PK",
                "PK"
            ],
            [
                "PW",
                "PW"
            ],
            [
                "PS",
                "PS"
            ],
            [
                "PA",
                "PA"
            ],
            [
                "PG",
                "PG"
            ],
            [
                "PY",
                "PY"
            ],
            [
                "PE",
                "PE"
            ],
            [
                "PH",
                "PH"
            ],
            [
                "PN",
                "PN"
            ],
            [
                "PL",
                "PL"
            ],
            [
                "PT",
                "PT"
            ],
            [
                "PR",
                "PR"
            ],
            [
                "QA",
                "QA"
            ],
            [
                "RE",
                "RE"
            ],
            [
                "RO",
                "RO"
            ],
            [
                "RU",
                "RU"
            ],
            [
                "RW",
                "RW"
            ],
            [
                "BL",
                "BL"
            ],
            [
                "SH",
                "SH"
            ],
            [
                "KN",
                "KN"
            ],
            [
                "LC",
                "LC"
            ],
            [
                "MF",
                "MF"
            ],
            [
                "PM",
                "PM"
            ],
            [
                "VC",
                "VC"
            ],
            [
                "WS",
                "WS"
            ],
            [
                "SM",
                "SM"
            ],
            [
                "ST",
                "ST"
            ],
            [
                "SA",
                "SA"
            ],
            [
                "SN",
                "SN"
            ],
            [
                "RS",
                "RS"
            ],
            [
                "SC",
                "SC"
            ],
            [
                "SL",
                "SL"
            ],
            [
                "SG",
                "SG"
            ],
            [
                "SX",
                "SX"
            ],
            [
                "SK",
                "SK"
            ],
            [
                "SI",
                "SI"
            ],
            [
                "SB",
                "SB"
            ],
            [
                "SO",
                "SO"
            ],
            [
                "ZA",
                "ZA"
            ],
            [
                "GS",
                "GS"
            ],
            [
                "SS",
                "SS"
            ],
            [
                "ES",
                "ES"
            ],
            [
                "LK",
                "LK"
            ],
            [
                "SD",
                "SD"
            ],
            [
                "SR",
                "SR"
            ],
            [
                "SJ",
                "SJ"
            ],
            [
                "SZ",
                "SZ"
            ],
            [
                "SE",
                "SE"
            ],
            [
                "CH",
                "CH"
            ],
            [
                "SY",
                "SY"
            ],
            [
                "TW",
                "TW"
            ],
            [
                "TJ",
                "TJ"
            ],
            [
                "TZ",
                "TZ"
            ],
            [
                "TH",
                "TH"
            ],
            [
                "TL",
                "TL"
            ],
            [
                "TG",
                "TG"
            ],
            [
                "TK",
                "TK"
            ],
            [
                "TO",
                "TO"
            ],
            [
                "TT",
                "TT"
            ],
            [
                "TN",
                "TN"
            ],
            [
                "TR",
                "TR"
            ],
            [
                "TM",
                "TM"
            ],
            [
                "TC",
                "TC"
            ],
            [
                "TV",
                "TV"
            ],
            [
                "UG",
                "UG"
            ],
            [
                "UA",
                "UA"
            ],
            [
                "AE",
                "AE"
            ],
            [
                "GB",
                "GB"
            ],
            [
                "US",
                "US"
            ],
            [
                "UM",
                "UM"
            ],
            [
                "UY",
                "UY"
            ],
            [
                "UZ",
                "UZ"
            ],
            [
                "VU",
                "VU"
            ],
            [
                "VE",
                "VE"
            ],
            [
                "VN",
                "VN"
            ],
            [
                "VG",
                "VG"
            ],
            [
                "VI",
                "VI"
            ],
            [
                "WF",
                "WF"
            ],
            [
                "EH",
                "EH"
            ],
            [
                "YE",
                "YE"
            ],
            [
                "ZM",
                "ZM"
            ],
            [
                "ZW",
                "ZW"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: country>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: country>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: country>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: country>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: country>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: country>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: country>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: country>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: country>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: country>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: country>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: country>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: country>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: country>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: country>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: country>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "country",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: country>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: country>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: country>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: country>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: country>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: country>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: country>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: country>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12290>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: country>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: country>>",
        "verbose_name": "country"
    },
    {
        "attname": "sub_filing_type",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.sub_filing_type)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: sub_filing_type>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: sub_filing_type>>",
        "choices": [
            [
                "Registered",
                "Registered"
            ],
            [
                "Un-Registered",
                "Un-Registered"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: sub_filing_type>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: sub_filing_type>>",
        "column": "sub_filing_type",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: sub_filing_type>>",
        "creation_counter": 181,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: sub_filing_type>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: sub_filing_type>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: sub_filing_type>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: sub_filing_type>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: sub_filing_type>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: sub_filing_type>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Registered",
                "Registered"
            ],
            [
                "Un-Registered",
                "Un-Registered"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: sub_filing_type>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: sub_filing_type>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: sub_filing_type>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "sub_filing_type",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: sub_filing_type>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: sub_filing_type>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: sub_filing_type>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: sub_filing_type>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: sub_filing_type>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: sub_filing_type>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: sub_filing_type>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: sub_filing_type>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12620>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: sub_filing_type>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: sub_filing_type>>",
        "verbose_name": "sub filing type"
    },
    {
        "attname": "primary_attorney_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.primary_attorney)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "column": "primary_attorney_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "creation_counter": 183,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Attorney.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.primary_attorney"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "primary_attorney",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.attorney",
                [
                    "app.Attorney.contact_ptr"
                ],
                "app.Patent.primary_attorney",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.primary_attorney",
                "app.Attorney.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Attorney'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "reverse_path_infos": [
            [
                "app.attorney",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Attorney.contact_ptr",
                "app.Patent.primary_attorney"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Attorney.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: primary_attorney>>",
        "verbose_name": "primary attorney"
    },
    {
        "attname": "secondary_attorney_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.secondary_attorney)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "column": "secondary_attorney_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "creation_counter": 184,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Attorney.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.secondary_attorney"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "secondary_attorney",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.attorney",
                [
                    "app.Attorney.contact_ptr"
                ],
                "app.Patent.secondary_attorney",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.secondary_attorney",
                "app.Attorney.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Attorney'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "reverse_path_infos": [
            [
                "app.attorney",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Attorney.contact_ptr",
                "app.Patent.secondary_attorney"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Attorney.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: secondary_attorney>>",
        "verbose_name": "secondary attorney"
    },
    {
        "attname": "primary_paralegal_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.primary_paralegal)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "column": "primary_paralegal_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "creation_counter": 185,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Paralegal.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.primary_paralegal"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "primary_paralegal",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.paralegal",
                [
                    "app.Paralegal.contact_ptr"
                ],
                "app.Patent.primary_paralegal",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.primary_paralegal",
                "app.Paralegal.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Paralegal'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "reverse_path_infos": [
            [
                "app.paralegal",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Paralegal.contact_ptr",
                "app.Patent.primary_paralegal"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Paralegal.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: primary_paralegal>>",
        "verbose_name": "primary paralegal"
    },
    {
        "attname": "secondary_paralegal_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.secondary_paralegal)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "column": "secondary_paralegal_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "creation_counter": 186,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Paralegal.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.secondary_paralegal"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "secondary_paralegal",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.paralegal",
                [
                    "app.Paralegal.contact_ptr"
                ],
                "app.Patent.secondary_paralegal",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.secondary_paralegal",
                "app.Paralegal.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Paralegal'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "reverse_path_infos": [
            [
                "app.paralegal",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Paralegal.contact_ptr",
                "app.Patent.secondary_paralegal"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Paralegal.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: secondary_paralegal>>",
        "verbose_name": "secondary paralegal"
    },
    {
        "attname": "Associate_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.Associate)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: Associate>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: Associate>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: Associate>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: Associate>>",
        "column": "Associate_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: Associate>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: Associate>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: Associate>>",
        "creation_counter": 187,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: Associate>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: Associate>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: Associate>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: Associate>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: Associate>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: Associate>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: Associate>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: Associate>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Associate.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: Associate>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: Associate>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: Associate>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: Associate>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: Associate>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.Associate"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "Associate",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.Associate",
                [
                    "app.Associate.contact_ptr"
                ],
                "app.Patent.Associate",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: Associate>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: Associate>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.Associate",
                "app.Associate.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Associate'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: Associate>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: Associate>>",
        "reverse_path_infos": [
            [
                "app.Associate",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Associate.contact_ptr",
                "app.Patent.Associate"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: Associate>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: Associate>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: Associate>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: Associate>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: Associate>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: Associate>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Associate.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: Associate>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: Associate>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: Associate>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: Associate>>",
        "verbose_name": "Associate"
    },
    {
        "attname": "Associate_ref_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.Associate_ref)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "column": "Associate_ref_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "creation_counter": 188,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Associate.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.Associate_ref"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "Associate_ref",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.Associate",
                [
                    "app.Associate.contact_ptr"
                ],
                "app.Patent.Associate_ref",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.Associate_ref",
                "app.Associate.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Associate'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "reverse_path_infos": [
            [
                "app.Associate",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Associate.contact_ptr",
                "app.Patent.Associate_ref"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Associate.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: Associate_ref>>",
        "verbose_name": "Associate ref"
    },
    {
        "attname": "Associate_2_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.Associate_2)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "column": "Associate_2_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "creation_counter": 189,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Associate.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.Associate_2"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "Associate_2",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.Associate",
                [
                    "app.Associate.contact_ptr"
                ],
                "app.Patent.Associate_2",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.Associate_2",
                "app.Associate.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Associate'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "reverse_path_infos": [
            [
                "app.Associate",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Associate.contact_ptr",
                "app.Patent.Associate_2"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Associate.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: Associate_2>>",
        "verbose_name": "Associate 2"
    },
    {
        "attname": "Associate_2_ref_id",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.Associate_2_ref)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "check": "<bound method ForeignKey.check of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "choices": null,
        "class_lookups": {
            "in": "<class 'django.db.models.fields.related_lookups.RelatedIn'>",
            "exact": "<class 'django.db.models.fields.related_lookups.RelatedExact'>",
            "lt": "<class 'django.db.models.fields.related_lookups.RelatedLessThan'>",
            "gt": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThan'>",
            "gte": "<class 'django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual'>",
            "lte": "<class 'django.db.models.fields.related_lookups.RelatedLessThanOrEqual'>",
            "isnull": "<class 'django.db.models.fields.related_lookups.RelatedIsNull'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "column": "Associate_2_ref_id",
        "concrete": true,
        "contribute_to_class": "<bound method ForeignObject.contribute_to_class of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "contribute_to_related_class": "<bound method ForeignKey.contribute_to_related_class of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "convert_empty_strings": "<bound method ForeignKey.convert_empty_strings of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "creation_counter": 190,
        "db_check": "<bound method ForeignKey.db_check of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "db_column": null,
        "db_constraint": true,
        "db_index": true,
        "db_parameters": "<bound method ForeignKey.db_parameters of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method ForeignKey.db_type of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "deconstruct": "<bound method ForeignKey.deconstruct of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "default_validators": [],
        "delete_cached_value": "<bound method FieldCacheMixin.delete_cached_value of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "description": "Foreign Key (type determined by related field)",
        "descriptor_class": "<class 'django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute'>",
        "do_related_class": "<bound method RelatedField.do_related_class of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "%(model)s instance with %(field)s %(value)r does not exist."
        },
        "flatchoices": [],
        "foreign_related_fields": [
            "app.Associate.contact_ptr"
        ],
        "formfield": "<bound method ForeignKey.formfield of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "forward_related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor'>",
        "from_fields": [
            "self"
        ],
        "get_attname": "<bound method ForeignKey.get_attname of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_attname_column": "<bound method ForeignKey.get_attname_column of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_cache_name": "<bound method RelatedField.get_cache_name of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_cached_value": "<bound method FieldCacheMixin.get_cached_value of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_col": "<bound method ForeignKey.get_col of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_db_converters": "<bound method ForeignKey.get_db_converters of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_db_prep_save": "<bound method ForeignKey.get_db_prep_save of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_db_prep_value": "<bound method ForeignKey.get_db_prep_value of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_default": "<bound method ForeignKey.get_default of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_extra_descriptor_filter": "<bound method ForeignObject.get_extra_descriptor_filter of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_extra_restriction": "<bound method ForeignObject.get_extra_restriction of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_foreign_related_value": "<bound method ForeignObject.get_foreign_related_value of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_forward_related_filter": "<bound method RelatedField.get_forward_related_filter of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_instance_value_for_fields": "<function ForeignObject.get_instance_value_for_fields at 0x00000279E8399000>",
        "get_internal_type": "<bound method Field.get_internal_type of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_joining_columns": "<bound method ForeignObject.get_joining_columns of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_limit_choices_to": "<bound method RelatedField.get_limit_choices_to of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_local_related_value": "<bound method ForeignObject.get_local_related_value of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_lookups": "<bound method ForeignObject.get_lookups of <class 'django.db.models.fields.related.ForeignKey'>>",
        "get_path_info": "<bound method ForeignObject.get_path_info of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_prep_value": "<bound method ForeignKey.get_prep_value of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_reverse_joining_columns": "<bound method ForeignObject.get_reverse_joining_columns of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_reverse_path_info": "<bound method ForeignKey.get_reverse_path_info of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_reverse_related_filter": "<bound method RelatedField.get_reverse_related_filter of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "help_text": "",
        "hidden": false,
        "is_cached": "<bound method FieldCacheMixin.is_cached of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "is_relation": true,
        "local_related_fields": [
            "app.Patent.Associate_2_ref"
        ],
        "many_to_many": false,
        "many_to_one": true,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "Associate_2_ref",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": false,
        "one_to_one": false,
        "opts": "app.patent",
        "path_infos": [
            [
                "app.patent",
                "app.Associate",
                [
                    "app.Associate.contact_ptr"
                ],
                "app.Patent.Associate_2_ref",
                false,
                true,
                null
            ]
        ],
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.related.ForeignKey'>>",
        "rel_class": "<class 'django.db.models.fields.reverse_related.ManyToOneRel'>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "related_accessor_class": "<class 'django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor'>",
        "related_fields": [
            [
                "app.Patent.Associate_2_ref",
                "app.Associate.contact_ptr"
            ]
        ],
        "related_model": "<class 'app.models.contacts.Associate'>",
        "related_query_name": "<bound method RelatedField.related_query_name of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "remote_field": "<ManyToOneRel: app.patent>",
        "requires_unique_target": true,
        "resolve_related_fields": "<bound method ForeignKey.resolve_related_fields of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "reverse_path_infos": [
            [
                "app.Associate",
                "app.patent",
                [
                    "app.Patent.id"
                ],
                "<ManyToOneRel: app.patent>",
                true,
                false,
                null
            ]
        ],
        "reverse_related_fields": [
            [
                "app.Associate.contact_ptr",
                "app.Patent.Associate_2_ref"
            ]
        ],
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "set_attributes_from_rel": "<bound method RelatedField.set_attributes_from_rel of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "set_cached_value": "<bound method FieldCacheMixin.set_cached_value of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "swappable": true,
        "swappable_setting": null,
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "target_field": "app.Associate.contact_ptr",
        "to_fields": [
            null
        ],
        "to_python": "<bound method ForeignKey.to_python of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method ForeignKey.validate of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.related.ForeignKey: Associate_2_ref>>",
        "verbose_name": "Associate 2 ref"
    },
    {
        "attname": "licence",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.licence)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: licence>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: licence>>",
        "choices": [
            [
                "Yes",
                "Yes"
            ],
            [
                "No",
                "No"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: licence>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: licence>>",
        "column": "licence",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: licence>>",
        "creation_counter": 192,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: licence>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: licence>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: licence>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: licence>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: licence>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: licence>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Yes",
                "Yes"
            ],
            [
                "No",
                "No"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: licence>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: licence>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: licence>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: licence>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: licence>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: licence>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: licence>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: licence>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: licence>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: licence>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: licence>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: licence>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: licence>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: licence>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: licence>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: licence>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "licence",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: licence>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: licence>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: licence>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: licence>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: licence>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: licence>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: licence>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: licence>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12B60>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: licence>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: licence>>",
        "verbose_name": "licence"
    },
    {
        "attname": "priority_provisional_application_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.priority_provisional_application_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "column": "priority_provisional_application_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "creation_counter": 194,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "priority_provisional_application_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12D40>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: priority_provisional_application_no>>",
        "verbose_name": "Priority/Provisional Application No"
    },
    {
        "attname": "priority_provisional_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.priority_provisional_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: priority_provisional_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: priority_provisional_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: priority_provisional_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: priority_provisional_date>>",
        "column": "priority_provisional_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: priority_provisional_date>>",
        "creation_counter": 195,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: priority_provisional_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: priority_provisional_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: priority_provisional_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: priority_provisional_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: priority_provisional_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: priority_provisional_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: priority_provisional_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: priority_provisional_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: priority_provisional_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "priority_provisional_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: priority_provisional_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: priority_provisional_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: priority_provisional_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: priority_provisional_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: priority_provisional_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: priority_provisional_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: priority_provisional_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: priority_provisional_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: priority_provisional_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: priority_provisional_date>>",
        "verbose_name": "Provisional Date"
    },
    {
        "attname": "next_annuity_due",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.next_annuity_due)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: next_annuity_due>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: next_annuity_due>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: next_annuity_due>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: next_annuity_due>>",
        "column": "next_annuity_due",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: next_annuity_due>>",
        "creation_counter": 196,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: next_annuity_due>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: next_annuity_due>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: next_annuity_due>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: next_annuity_due>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: next_annuity_due>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: next_annuity_due>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: next_annuity_due>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: next_annuity_due>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: next_annuity_due>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "next_annuity_due",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: next_annuity_due>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: next_annuity_due>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: next_annuity_due>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: next_annuity_due>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: next_annuity_due>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: next_annuity_due>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: next_annuity_due>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: next_annuity_due>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12E00>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: next_annuity_due>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: next_annuity_due>>",
        "verbose_name": "next annuity due"
    },
    {
        "attname": "PCT_application_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.PCT_application_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: PCT_application_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: PCT_application_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: PCT_application_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: PCT_application_no>>",
        "column": "PCT_application_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: PCT_application_no>>",
        "creation_counter": 197,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: PCT_application_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: PCT_application_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: PCT_application_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: PCT_application_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: PCT_application_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: PCT_application_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: PCT_application_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: PCT_application_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: PCT_application_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "PCT_application_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: PCT_application_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: PCT_application_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: PCT_application_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: PCT_application_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: PCT_application_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: PCT_application_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: PCT_application_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: PCT_application_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12E90>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: PCT_application_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: PCT_application_no>>",
        "verbose_name": "PCT application no"
    },
    {
        "attname": "PCT_application_Date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.PCT_application_Date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: PCT_application_Date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: PCT_application_Date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: PCT_application_Date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: PCT_application_Date>>",
        "column": "PCT_application_Date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: PCT_application_Date>>",
        "creation_counter": 198,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: PCT_application_Date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: PCT_application_Date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: PCT_application_Date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: PCT_application_Date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: PCT_application_Date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: PCT_application_Date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: PCT_application_Date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: PCT_application_Date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: PCT_application_Date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "PCT_application_Date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: PCT_application_Date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: PCT_application_Date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: PCT_application_Date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: PCT_application_Date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: PCT_application_Date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: PCT_application_Date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: PCT_application_Date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: PCT_application_Date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: PCT_application_Date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: PCT_application_Date>>",
        "verbose_name": "PCT application Date"
    },
    {
        "attname": "annuity_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.annuity_no)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.IntegerField: annuity_no>>",
        "check": "<bound method IntegerField.check of <django.db.models.fields.IntegerField: annuity_no>>",
        "choices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ],
            [
                5,
                5
            ],
            [
                6,
                6
            ],
            [
                7,
                7
            ],
            [
                8,
                8
            ],
            [
                9,
                9
            ],
            [
                10,
                10
            ],
            [
                11,
                11
            ],
            [
                12,
                12
            ],
            [
                13,
                13
            ],
            [
                14,
                14
            ],
            [
                15,
                15
            ]
        ],
        "class_lookups": {
            "gte": "<class 'django.db.models.lookups.IntegerGreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.IntegerLessThan'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.IntegerField: annuity_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.IntegerField: annuity_no>>",
        "column": "annuity_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.IntegerField: annuity_no>>",
        "creation_counter": 199,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.IntegerField: annuity_no>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.IntegerField: annuity_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.IntegerField: annuity_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.IntegerField: annuity_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.IntegerField: annuity_no>>",
        "deconstruct": "<bound method Field.deconstruct of <django.db.models.fields.IntegerField: annuity_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "default_validators": [],
        "description": "Integer",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "flatchoices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ],
            [
                5,
                5
            ],
            [
                6,
                6
            ],
            [
                7,
                7
            ],
            [
                8,
                8
            ],
            [
                9,
                9
            ],
            [
                10,
                10
            ],
            [
                11,
                11
            ],
            [
                12,
                12
            ],
            [
                13,
                13
            ],
            [
                14,
                14
            ],
            [
                15,
                15
            ]
        ],
        "formfield": "<bound method IntegerField.formfield of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_internal_type": "<bound method IntegerField.get_internal_type of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.IntegerField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_prep_value": "<bound method IntegerField.get_prep_value of <django.db.models.fields.IntegerField: annuity_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.IntegerField: annuity_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.IntegerField: annuity_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "annuity_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.IntegerField: annuity_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.IntegerField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.IntegerField: annuity_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.IntegerField: annuity_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.IntegerField: annuity_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.IntegerField: annuity_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.IntegerField: annuity_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method IntegerField.to_python of <django.db.models.fields.IntegerField: annuity_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.IntegerField: annuity_no>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.IntegerField: annuity_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.IntegerField: annuity_no>>",
        "verbose_name": "annuity no"
    },
    {
        "attname": "application_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.application_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: application_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: application_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: application_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: application_no>>",
        "column": "application_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: application_no>>",
        "creation_counter": 200,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: application_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: application_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: application_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: application_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: application_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: application_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: application_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: application_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: application_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: application_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: application_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: application_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: application_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: application_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: application_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: application_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: application_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: application_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: application_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: application_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: application_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: application_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "application_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: application_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: application_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: application_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: application_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: application_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: application_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: application_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: application_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E89F9870>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: application_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: application_no>>",
        "verbose_name": "application no"
    },
    {
        "attname": "application_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.application_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: application_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: application_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: application_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: application_date>>",
        "column": "application_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: application_date>>",
        "creation_counter": 201,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: application_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: application_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: application_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: application_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: application_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: application_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: application_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: application_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: application_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: application_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: application_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: application_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: application_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: application_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: application_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: application_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: application_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: application_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: application_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: application_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: application_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: application_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "application_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: application_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: application_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: application_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: application_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: application_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: application_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: application_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: application_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: application_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: application_date>>",
        "verbose_name": "application date"
    },
    {
        "attname": "taxs_paid_by",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.taxs_paid_by)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: taxs_paid_by>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: taxs_paid_by>>",
        "choices": [
            [
                "Contact 1",
                "Contact 1"
            ],
            [
                "Contact 2",
                "Contact 2"
            ],
            [
                "Contact 3",
                "Contact 3"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: taxs_paid_by>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: taxs_paid_by>>",
        "column": "taxs_paid_by",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: taxs_paid_by>>",
        "creation_counter": 202,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: taxs_paid_by>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: taxs_paid_by>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: taxs_paid_by>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: taxs_paid_by>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: taxs_paid_by>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: taxs_paid_by>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Contact 1",
                "Contact 1"
            ],
            [
                "Contact 2",
                "Contact 2"
            ],
            [
                "Contact 3",
                "Contact 3"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: taxs_paid_by>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: taxs_paid_by>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: taxs_paid_by>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "taxs_paid_by",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: taxs_paid_by>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: taxs_paid_by>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: taxs_paid_by>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: taxs_paid_by>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: taxs_paid_by>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: taxs_paid_by>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: taxs_paid_by>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: taxs_paid_by>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E89FB8E0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: taxs_paid_by>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: taxs_paid_by>>",
        "verbose_name": "taxs paid by"
    },
    {
        "attname": "publication_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.publication_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: publication_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: publication_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: publication_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: publication_no>>",
        "column": "publication_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: publication_no>>",
        "creation_counter": 203,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: publication_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: publication_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: publication_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: publication_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: publication_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: publication_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: publication_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: publication_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: publication_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: publication_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: publication_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: publication_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: publication_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: publication_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: publication_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: publication_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: publication_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: publication_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: publication_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: publication_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: publication_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: publication_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "publication_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: publication_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: publication_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: publication_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: publication_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: publication_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: publication_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: publication_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: publication_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E89FBD60>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: publication_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: publication_no>>",
        "verbose_name": "publication no"
    },
    {
        "attname": "publication_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.publication_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: publication_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: publication_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: publication_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: publication_date>>",
        "column": "publication_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: publication_date>>",
        "creation_counter": 204,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: publication_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: publication_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: publication_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: publication_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: publication_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: publication_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: publication_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: publication_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: publication_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: publication_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: publication_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: publication_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: publication_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: publication_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: publication_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: publication_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: publication_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: publication_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: publication_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: publication_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: publication_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: publication_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "publication_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: publication_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: publication_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: publication_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: publication_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: publication_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: publication_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: publication_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: publication_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: publication_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: publication_date>>",
        "verbose_name": "publication date"
    },
    {
        "attname": "patent_term_no_of_days",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.patent_term_no_of_days)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "column": "patent_term_no_of_days",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "creation_counter": 205,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "patent_term_no_of_days",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A12050>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: patent_term_no_of_days>>",
        "verbose_name": "patent term no of days"
    },
    {
        "attname": "granted_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.granted_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: granted_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: granted_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: granted_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: granted_no>>",
        "column": "granted_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: granted_no>>",
        "creation_counter": 206,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: granted_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: granted_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: granted_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: granted_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: granted_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: granted_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: granted_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: granted_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: granted_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: granted_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: granted_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: granted_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: granted_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: granted_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: granted_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: granted_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: granted_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: granted_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: granted_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: granted_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: granted_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: granted_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "granted_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: granted_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: granted_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: granted_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: granted_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: granted_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: granted_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: granted_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: granted_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A11F30>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: granted_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: granted_no>>",
        "verbose_name": "granted no"
    },
    {
        "attname": "granted_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.granted_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: granted_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: granted_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: granted_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: granted_date>>",
        "column": "granted_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: granted_date>>",
        "creation_counter": 207,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: granted_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: granted_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: granted_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: granted_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: granted_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: granted_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: granted_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: granted_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: granted_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: granted_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: granted_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: granted_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: granted_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: granted_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: granted_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: granted_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: granted_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: granted_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: granted_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: granted_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: granted_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: granted_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "granted_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: granted_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: granted_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: granted_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: granted_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: granted_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: granted_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: granted_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: granted_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: granted_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: granted_date>>",
        "verbose_name": "granted date"
    },
    {
        "attname": "large_small_entity",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_patent, app.Patent.large_small_entity)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: large_small_entity>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: large_small_entity>>",
        "choices": [
            [
                "Large",
                "Large"
            ],
            [
                "Small",
                "Small"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: large_small_entity>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: large_small_entity>>",
        "column": "large_small_entity",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: large_small_entity>>",
        "creation_counter": 208,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: large_small_entity>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: large_small_entity>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: large_small_entity>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: large_small_entity>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: large_small_entity>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: large_small_entity>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Large",
                "Large"
            ],
            [
                "Small",
                "Small"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: large_small_entity>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: large_small_entity>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: large_small_entity>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: large_small_entity>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: large_small_entity>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: large_small_entity>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: large_small_entity>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: large_small_entity>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: large_small_entity>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: large_small_entity>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: large_small_entity>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: large_small_entity>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: large_small_entity>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: large_small_entity>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: large_small_entity>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: large_small_entity>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Patent'>",
        "name": "large_small_entity",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: large_small_entity>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: large_small_entity>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: large_small_entity>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: large_small_entity>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: large_small_entity>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: large_small_entity>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: large_small_entity>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: large_small_entity>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A11E10>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: large_small_entity>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: large_small_entity>>",
        "verbose_name": "Large / Small Entity"
    },
    {
        "attname": "case_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.case_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: case_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: case_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: case_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: case_no>>",
        "column": "case_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: case_no>>",
        "creation_counter": 244,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: case_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: case_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: case_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: case_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: case_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: case_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: case_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: case_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: case_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: case_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: case_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: case_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: case_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: case_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: case_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: case_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: case_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: case_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: case_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: case_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: case_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: case_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "case_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: case_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: case_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: case_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: case_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: case_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: case_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: case_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: case_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A2B130>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: case_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: case_no>>",
        "verbose_name": "case no"
    },
    {
        "attname": "picture_of_trademark",
        "attr_class": "<class 'app.models.fields.ImageFieldFile'>",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.picture_of_trademark)",
        "cast_db_type": "<bound method Field.cast_db_type of <app.models.fields.ImageField: picture_of_trademark>>",
        "check": "<bound method ImageField.check of <app.models.fields.ImageField: picture_of_trademark>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <app.models.fields.ImageField: picture_of_trademark>>",
        "clone": "<bound method Field.clone of <app.models.fields.ImageField: picture_of_trademark>>",
        "column": "picture_of_trademark",
        "concrete": true,
        "contribute_to_class": "<bound method ImageField.contribute_to_class of <app.models.fields.ImageField: picture_of_trademark>>",
        "creation_counter": 246,
        "db_check": "<bound method Field.db_check of <app.models.fields.ImageField: picture_of_trademark>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <app.models.fields.ImageField: picture_of_trademark>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <app.models.fields.ImageField: picture_of_trademark>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <app.models.fields.ImageField: picture_of_trademark>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <app.models.fields.ImageField: picture_of_trademark>>",
        "deconstruct": "<bound method ImageField.deconstruct of <app.models.fields.ImageField: picture_of_trademark>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "Image",
        "descriptor_class": "<class 'django.db.models.fields.files.ImageFileDescriptor'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method ImageField.formfield of <app.models.fields.ImageField: picture_of_trademark>>",
        "generate_filename": "<bound method FileField.generate_filename of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_attname": "<bound method Field.get_attname of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_attname_column": "<bound method Field.get_attname_column of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_choices": "<bound method Field.get_choices of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_col": "<bound method Field.get_col of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_db_converters": "<bound method Field.get_db_converters of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_default": "<bound method Field.get_default of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_internal_type": "<bound method FileField.get_internal_type of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'app.models.fields.ImageField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_prep_value": "<bound method FileField.get_prep_value of <app.models.fields.ImageField: picture_of_trademark>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <app.models.fields.ImageField: picture_of_trademark>>",
        "has_default": "<bound method Field.has_default of <app.models.fields.ImageField: picture_of_trademark>>",
        "height_field": null,
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 100,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "picture_of_trademark",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method FileField.pre_save of <app.models.fields.ImageField: picture_of_trademark>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'app.models.fields.ImageField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <app.models.fields.ImageField: picture_of_trademark>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <app.models.fields.ImageField: picture_of_trademark>>",
        "save_form_data": "<bound method FileField.save_form_data of <app.models.fields.ImageField: picture_of_trademark>>",
        "select_format": "<bound method Field.select_format of <app.models.fields.ImageField: picture_of_trademark>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <app.models.fields.ImageField: picture_of_trademark>>",
        "storage": "<django.core.files.storage.FileSystemStorage object at 0x00000279EA3F4730>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method Field.to_python of <app.models.fields.ImageField: picture_of_trademark>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "update_dimension_fields": "<bound method ImageField.update_dimension_fields of <app.models.fields.ImageField: picture_of_trademark>>",
        "upload_to": "trademarks",
        "validate": "<bound method Field.validate of <app.models.fields.ImageField: picture_of_trademark>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <app.models.fields.ImageField: picture_of_trademark>>",
        "value_to_string": "<bound method Field.value_to_string of <app.models.fields.ImageField: picture_of_trademark>>",
        "verbose_name": "picture of trademark",
        "width_field": null
    },
    {
        "attname": "trademark_priority_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.trademark_priority_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: trademark_priority_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: trademark_priority_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: trademark_priority_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: trademark_priority_no>>",
        "column": "trademark_priority_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: trademark_priority_no>>",
        "creation_counter": 253,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: trademark_priority_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: trademark_priority_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: trademark_priority_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: trademark_priority_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: trademark_priority_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: trademark_priority_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: trademark_priority_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: trademark_priority_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: trademark_priority_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "trademark_priority_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: trademark_priority_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: trademark_priority_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: trademark_priority_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: trademark_priority_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: trademark_priority_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: trademark_priority_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: trademark_priority_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: trademark_priority_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A2B550>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: trademark_priority_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: trademark_priority_no>>",
        "verbose_name": "trademark priority no"
    },
    {
        "attname": "trademark_application_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.trademark_application_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: trademark_application_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: trademark_application_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: trademark_application_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: trademark_application_no>>",
        "column": "trademark_application_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: trademark_application_no>>",
        "creation_counter": 255,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: trademark_application_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: trademark_application_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: trademark_application_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: trademark_application_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: trademark_application_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: trademark_application_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: trademark_application_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: trademark_application_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: trademark_application_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "trademark_application_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: trademark_application_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: trademark_application_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: trademark_application_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: trademark_application_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: trademark_application_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: trademark_application_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: trademark_application_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: trademark_application_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A2B640>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: trademark_application_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: trademark_application_no>>",
        "verbose_name": "trademark application no"
    },
    {
        "attname": "trademark_registration_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.trademark_registration_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: trademark_registration_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: trademark_registration_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: trademark_registration_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: trademark_registration_no>>",
        "column": "trademark_registration_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: trademark_registration_no>>",
        "creation_counter": 257,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: trademark_registration_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: trademark_registration_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: trademark_registration_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: trademark_registration_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: trademark_registration_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: trademark_registration_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: trademark_registration_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: trademark_registration_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: trademark_registration_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "trademark_registration_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: trademark_registration_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: trademark_registration_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: trademark_registration_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: trademark_registration_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: trademark_registration_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: trademark_registration_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: trademark_registration_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: trademark_registration_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A2B700>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: trademark_registration_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: trademark_registration_no>>",
        "verbose_name": "trademark registration no"
    },
    {
        "attname": "date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: date>>",
        "column": "date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: date>>",
        "creation_counter": 258,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: date>>",
        "verbose_name": "date"
    },
    {
        "attname": "next_tax_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.next_tax_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: next_tax_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: next_tax_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: next_tax_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: next_tax_date>>",
        "column": "next_tax_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: next_tax_date>>",
        "creation_counter": 259,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: next_tax_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: next_tax_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: next_tax_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: next_tax_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: next_tax_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: next_tax_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: next_tax_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: next_tax_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: next_tax_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: next_tax_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: next_tax_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: next_tax_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: next_tax_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: next_tax_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: next_tax_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: next_tax_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: next_tax_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: next_tax_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: next_tax_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: next_tax_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: next_tax_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: next_tax_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "next_tax_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: next_tax_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: next_tax_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: next_tax_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: next_tax_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: next_tax_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: next_tax_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: next_tax_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: next_tax_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: next_tax_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: next_tax_date>>",
        "verbose_name": "next tax date"
    },
    {
        "attname": "taxes_paid_by",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.taxes_paid_by)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: taxes_paid_by>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: taxes_paid_by>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: taxes_paid_by>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: taxes_paid_by>>",
        "column": "taxes_paid_by",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: taxes_paid_by>>",
        "creation_counter": 260,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: taxes_paid_by>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: taxes_paid_by>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: taxes_paid_by>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: taxes_paid_by>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: taxes_paid_by>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: taxes_paid_by>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: taxes_paid_by>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: taxes_paid_by>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: taxes_paid_by>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "taxes_paid_by",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: taxes_paid_by>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: taxes_paid_by>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: taxes_paid_by>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: taxes_paid_by>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: taxes_paid_by>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: taxes_paid_by>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: taxes_paid_by>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: taxes_paid_by>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A2B7F0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: taxes_paid_by>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: taxes_paid_by>>",
        "verbose_name": "taxes paid by"
    },
    {
        "attname": "does_it_expire",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.does_it_expire)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: does_it_expire>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: does_it_expire>>",
        "choices": [
            [
                "Yes",
                "Yes"
            ],
            [
                "No",
                "No"
            ]
        ],
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: does_it_expire>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: does_it_expire>>",
        "column": "does_it_expire",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: does_it_expire>>",
        "creation_counter": 261,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: does_it_expire>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: does_it_expire>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: does_it_expire>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: does_it_expire>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: does_it_expire>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: does_it_expire>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [
            [
                "Yes",
                "Yes"
            ],
            [
                "No",
                "No"
            ]
        ],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: does_it_expire>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: does_it_expire>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: does_it_expire>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: does_it_expire>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: does_it_expire>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: does_it_expire>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: does_it_expire>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: does_it_expire>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: does_it_expire>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: does_it_expire>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: does_it_expire>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: does_it_expire>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: does_it_expire>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: does_it_expire>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: does_it_expire>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: does_it_expire>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 4,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "does_it_expire",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: does_it_expire>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: does_it_expire>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: does_it_expire>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: does_it_expire>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: does_it_expire>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: does_it_expire>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: does_it_expire>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: does_it_expire>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A2B8B0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: does_it_expire>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: does_it_expire>>",
        "verbose_name": "does it expire"
    },
    {
        "attname": "expiry_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_trademark, app.Trademark.expiry_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: expiry_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: expiry_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: expiry_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: expiry_date>>",
        "column": "expiry_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: expiry_date>>",
        "creation_counter": 262,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: expiry_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: expiry_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: expiry_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: expiry_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: expiry_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: expiry_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: expiry_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: expiry_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: expiry_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: expiry_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: expiry_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: expiry_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: expiry_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: expiry_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: expiry_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: expiry_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: expiry_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: expiry_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: expiry_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: expiry_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: expiry_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: expiry_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Trademark'>",
        "name": "expiry_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: expiry_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: expiry_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: expiry_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: expiry_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: expiry_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: expiry_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: expiry_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: expiry_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: expiry_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: expiry_date>>",
        "verbose_name": "expiry date"
    },
    {
        "attname": "no_of_drawings",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.no_of_drawings)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "check": "<bound method IntegerField.check of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "choices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ],
            [
                5,
                5
            ],
            [
                6,
                6
            ],
            [
                7,
                7
            ],
            [
                8,
                8
            ],
            [
                9,
                9
            ],
            [
                10,
                10
            ]
        ],
        "class_lookups": {
            "gte": "<class 'django.db.models.lookups.IntegerGreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.IntegerLessThan'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "column": "no_of_drawings",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "creation_counter": 228,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "deconstruct": "<bound method Field.deconstruct of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "default_validators": [],
        "description": "Integer",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "flatchoices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ],
            [
                5,
                5
            ],
            [
                6,
                6
            ],
            [
                7,
                7
            ],
            [
                8,
                8
            ],
            [
                9,
                9
            ],
            [
                10,
                10
            ]
        ],
        "formfield": "<bound method IntegerField.formfield of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_internal_type": "<bound method IntegerField.get_internal_type of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.IntegerField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_prep_value": "<bound method IntegerField.get_prep_value of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "no_of_drawings",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.IntegerField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method IntegerField.to_python of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.IntegerField: no_of_drawings>>",
        "verbose_name": "no of drawings"
    },
    {
        "attname": "no_of_views",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.no_of_views)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.IntegerField: no_of_views>>",
        "check": "<bound method IntegerField.check of <django.db.models.fields.IntegerField: no_of_views>>",
        "choices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ],
            [
                5,
                5
            ],
            [
                6,
                6
            ],
            [
                7,
                7
            ],
            [
                8,
                8
            ],
            [
                9,
                9
            ],
            [
                10,
                10
            ],
            [
                11,
                11
            ],
            [
                12,
                12
            ],
            [
                13,
                13
            ],
            [
                14,
                14
            ],
            [
                15,
                15
            ],
            [
                16,
                16
            ],
            [
                17,
                17
            ],
            [
                18,
                18
            ],
            [
                19,
                19
            ],
            [
                20,
                20
            ],
            [
                21,
                21
            ],
            [
                22,
                22
            ],
            [
                23,
                23
            ],
            [
                24,
                24
            ],
            [
                25,
                25
            ],
            [
                26,
                26
            ],
            [
                27,
                27
            ],
            [
                28,
                28
            ],
            [
                29,
                29
            ],
            [
                30,
                30
            ],
            [
                31,
                31
            ],
            [
                32,
                32
            ],
            [
                33,
                33
            ],
            [
                34,
                34
            ],
            [
                35,
                35
            ],
            [
                36,
                36
            ],
            [
                37,
                37
            ],
            [
                38,
                38
            ],
            [
                39,
                39
            ],
            [
                40,
                40
            ],
            [
                41,
                41
            ],
            [
                42,
                42
            ],
            [
                43,
                43
            ],
            [
                44,
                44
            ],
            [
                45,
                45
            ],
            [
                46,
                46
            ],
            [
                47,
                47
            ],
            [
                48,
                48
            ],
            [
                49,
                49
            ],
            [
                50,
                50
            ],
            [
                51,
                51
            ],
            [
                52,
                52
            ],
            [
                53,
                53
            ],
            [
                54,
                54
            ],
            [
                55,
                55
            ],
            [
                56,
                56
            ],
            [
                57,
                57
            ],
            [
                58,
                58
            ],
            [
                59,
                59
            ],
            [
                60,
                60
            ],
            [
                61,
                61
            ],
            [
                62,
                62
            ],
            [
                63,
                63
            ],
            [
                64,
                64
            ],
            [
                65,
                65
            ],
            [
                66,
                66
            ],
            [
                67,
                67
            ],
            [
                68,
                68
            ],
            [
                69,
                69
            ],
            [
                70,
                70
            ],
            [
                71,
                71
            ],
            [
                72,
                72
            ],
            [
                73,
                73
            ],
            [
                74,
                74
            ],
            [
                75,
                75
            ],
            [
                76,
                76
            ],
            [
                77,
                77
            ],
            [
                78,
                78
            ],
            [
                79,
                79
            ],
            [
                80,
                80
            ],
            [
                81,
                81
            ],
            [
                82,
                82
            ],
            [
                83,
                83
            ],
            [
                84,
                84
            ],
            [
                85,
                85
            ],
            [
                86,
                86
            ],
            [
                87,
                87
            ],
            [
                88,
                88
            ],
            [
                89,
                89
            ],
            [
                90,
                90
            ],
            [
                91,
                91
            ],
            [
                92,
                92
            ],
            [
                93,
                93
            ],
            [
                94,
                94
            ],
            [
                95,
                95
            ],
            [
                96,
                96
            ],
            [
                97,
                97
            ],
            [
                98,
                98
            ],
            [
                99,
                99
            ],
            [
                100,
                100
            ]
        ],
        "class_lookups": {
            "gte": "<class 'django.db.models.lookups.IntegerGreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.IntegerLessThan'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.IntegerField: no_of_views>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.IntegerField: no_of_views>>",
        "column": "no_of_views",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.IntegerField: no_of_views>>",
        "creation_counter": 229,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.IntegerField: no_of_views>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.IntegerField: no_of_views>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.IntegerField: no_of_views>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.IntegerField: no_of_views>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.IntegerField: no_of_views>>",
        "deconstruct": "<bound method Field.deconstruct of <django.db.models.fields.IntegerField: no_of_views>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "default_validators": [],
        "description": "Integer",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value must be an integer."
        },
        "flatchoices": [
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                3,
                3
            ],
            [
                4,
                4
            ],
            [
                5,
                5
            ],
            [
                6,
                6
            ],
            [
                7,
                7
            ],
            [
                8,
                8
            ],
            [
                9,
                9
            ],
            [
                10,
                10
            ],
            [
                11,
                11
            ],
            [
                12,
                12
            ],
            [
                13,
                13
            ],
            [
                14,
                14
            ],
            [
                15,
                15
            ],
            [
                16,
                16
            ],
            [
                17,
                17
            ],
            [
                18,
                18
            ],
            [
                19,
                19
            ],
            [
                20,
                20
            ],
            [
                21,
                21
            ],
            [
                22,
                22
            ],
            [
                23,
                23
            ],
            [
                24,
                24
            ],
            [
                25,
                25
            ],
            [
                26,
                26
            ],
            [
                27,
                27
            ],
            [
                28,
                28
            ],
            [
                29,
                29
            ],
            [
                30,
                30
            ],
            [
                31,
                31
            ],
            [
                32,
                32
            ],
            [
                33,
                33
            ],
            [
                34,
                34
            ],
            [
                35,
                35
            ],
            [
                36,
                36
            ],
            [
                37,
                37
            ],
            [
                38,
                38
            ],
            [
                39,
                39
            ],
            [
                40,
                40
            ],
            [
                41,
                41
            ],
            [
                42,
                42
            ],
            [
                43,
                43
            ],
            [
                44,
                44
            ],
            [
                45,
                45
            ],
            [
                46,
                46
            ],
            [
                47,
                47
            ],
            [
                48,
                48
            ],
            [
                49,
                49
            ],
            [
                50,
                50
            ],
            [
                51,
                51
            ],
            [
                52,
                52
            ],
            [
                53,
                53
            ],
            [
                54,
                54
            ],
            [
                55,
                55
            ],
            [
                56,
                56
            ],
            [
                57,
                57
            ],
            [
                58,
                58
            ],
            [
                59,
                59
            ],
            [
                60,
                60
            ],
            [
                61,
                61
            ],
            [
                62,
                62
            ],
            [
                63,
                63
            ],
            [
                64,
                64
            ],
            [
                65,
                65
            ],
            [
                66,
                66
            ],
            [
                67,
                67
            ],
            [
                68,
                68
            ],
            [
                69,
                69
            ],
            [
                70,
                70
            ],
            [
                71,
                71
            ],
            [
                72,
                72
            ],
            [
                73,
                73
            ],
            [
                74,
                74
            ],
            [
                75,
                75
            ],
            [
                76,
                76
            ],
            [
                77,
                77
            ],
            [
                78,
                78
            ],
            [
                79,
                79
            ],
            [
                80,
                80
            ],
            [
                81,
                81
            ],
            [
                82,
                82
            ],
            [
                83,
                83
            ],
            [
                84,
                84
            ],
            [
                85,
                85
            ],
            [
                86,
                86
            ],
            [
                87,
                87
            ],
            [
                88,
                88
            ],
            [
                89,
                89
            ],
            [
                90,
                90
            ],
            [
                91,
                91
            ],
            [
                92,
                92
            ],
            [
                93,
                93
            ],
            [
                94,
                94
            ],
            [
                95,
                95
            ],
            [
                96,
                96
            ],
            [
                97,
                97
            ],
            [
                98,
                98
            ],
            [
                99,
                99
            ],
            [
                100,
                100
            ]
        ],
        "formfield": "<bound method IntegerField.formfield of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_internal_type": "<bound method IntegerField.get_internal_type of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.IntegerField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_prep_value": "<bound method IntegerField.get_prep_value of <django.db.models.fields.IntegerField: no_of_views>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.IntegerField: no_of_views>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.IntegerField: no_of_views>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "no_of_views",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.IntegerField: no_of_views>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.IntegerField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.IntegerField: no_of_views>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.IntegerField: no_of_views>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.IntegerField: no_of_views>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.IntegerField: no_of_views>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.IntegerField: no_of_views>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method IntegerField.to_python of <django.db.models.fields.IntegerField: no_of_views>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.IntegerField: no_of_views>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.IntegerField: no_of_views>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.IntegerField: no_of_views>>",
        "verbose_name": "no of views"
    },
    {
        "attname": "next_taxes_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.next_taxes_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: next_taxes_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: next_taxes_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: next_taxes_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: next_taxes_date>>",
        "column": "next_taxes_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: next_taxes_date>>",
        "creation_counter": 231,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: next_taxes_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: next_taxes_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: next_taxes_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: next_taxes_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: next_taxes_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: next_taxes_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: next_taxes_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: next_taxes_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: next_taxes_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "next_taxes_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: next_taxes_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: next_taxes_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: next_taxes_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: next_taxes_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: next_taxes_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: next_taxes_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: next_taxes_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: next_taxes_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: next_taxes_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: next_taxes_date>>",
        "verbose_name": "next taxes date"
    },
    {
        "attname": "next_annuity_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.next_annuity_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: next_annuity_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: next_annuity_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: next_annuity_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: next_annuity_no>>",
        "column": "next_annuity_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: next_annuity_no>>",
        "creation_counter": 232,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: next_annuity_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: next_annuity_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: next_annuity_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: next_annuity_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: next_annuity_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: next_annuity_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: next_annuity_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: next_annuity_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: next_annuity_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "next_annuity_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: next_annuity_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: next_annuity_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: next_annuity_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: next_annuity_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: next_annuity_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: next_annuity_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: next_annuity_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: next_annuity_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A29C30>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: next_annuity_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: next_annuity_no>>",
        "verbose_name": "next annuity no"
    },
    {
        "attname": "expired_date",
        "auto_created": false,
        "auto_creation_counter": -28,
        "auto_now": false,
        "auto_now_add": false,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.expired_date)",
        "cast_db_type": "<bound method Field.cast_db_type of <django.db.models.fields.DateField: expired_date>>",
        "check": "<bound method DateTimeCheckMixin.check of <django.db.models.fields.DateField: expired_date>>",
        "choices": null,
        "class_lookups": {
            "year": "<class 'django.db.models.functions.datetime.ExtractYear'>",
            "month": "<class 'django.db.models.functions.datetime.ExtractMonth'>",
            "day": "<class 'django.db.models.functions.datetime.ExtractDay'>",
            "week_day": "<class 'django.db.models.functions.datetime.ExtractWeekDay'>",
            "iso_week_day": "<class 'django.db.models.functions.datetime.ExtractIsoWeekDay'>",
            "week": "<class 'django.db.models.functions.datetime.ExtractWeek'>",
            "iso_year": "<class 'django.db.models.functions.datetime.ExtractIsoYear'>",
            "quarter": "<class 'django.db.models.functions.datetime.ExtractQuarter'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.DateField: expired_date>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.DateField: expired_date>>",
        "column": "expired_date",
        "concrete": true,
        "contribute_to_class": "<bound method DateField.contribute_to_class of <django.db.models.fields.DateField: expired_date>>",
        "creation_counter": 234,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.DateField: expired_date>>",
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method Field.db_parameters of <django.db.models.fields.DateField: expired_date>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.DateField: expired_date>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.DateField: expired_date>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.DateField: expired_date>>",
        "deconstruct": "<bound method DateField.deconstruct of <django.db.models.fields.DateField: expired_date>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "default_validators": [],
        "description": "Date (without time)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": false,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s.",
            "invalid": "\u201c%(value)s\u201d value has an invalid date format. It must be in YYYY-MM-DD format.",
            "invalid_date": "\u201c%(value)s\u201d value has the correct format (YYYY-MM-DD) but it is an invalid date."
        },
        "flatchoices": [],
        "formfield": "<bound method DateField.formfield of <django.db.models.fields.DateField: expired_date>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.DateField: expired_date>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.DateField: expired_date>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.DateField: expired_date>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.DateField: expired_date>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.DateField: expired_date>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.DateField: expired_date>>",
        "get_db_prep_value": "<bound method DateField.get_db_prep_value of <django.db.models.fields.DateField: expired_date>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.DateField: expired_date>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.DateField: expired_date>>",
        "get_internal_type": "<bound method DateField.get_internal_type of <django.db.models.fields.DateField: expired_date>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.DateField: expired_date>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.DateField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.DateField: expired_date>>",
        "get_prep_value": "<bound method DateField.get_prep_value of <django.db.models.fields.DateField: expired_date>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.DateField: expired_date>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.DateField: expired_date>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": null,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "expired_date",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method DateField.pre_save of <django.db.models.fields.DateField: expired_date>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.DateField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.DateField: expired_date>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.DateField: expired_date>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.DateField: expired_date>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.DateField: expired_date>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.DateField: expired_date>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method DateField.to_python of <django.db.models.fields.DateField: expired_date>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.DateField: expired_date>>",
        "validators": [],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.DateField: expired_date>>",
        "value_to_string": "<bound method DateField.value_to_string of <django.db.models.fields.DateField: expired_date>>",
        "verbose_name": "expired date"
    },
    {
        "attname": "design_priority_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.design_priority_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: design_priority_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: design_priority_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: design_priority_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: design_priority_no>>",
        "column": "design_priority_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: design_priority_no>>",
        "creation_counter": 235,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: design_priority_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: design_priority_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: design_priority_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: design_priority_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: design_priority_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: design_priority_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: design_priority_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: design_priority_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: design_priority_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: design_priority_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: design_priority_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: design_priority_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: design_priority_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: design_priority_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: design_priority_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: design_priority_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: design_priority_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: design_priority_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: design_priority_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: design_priority_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: design_priority_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: design_priority_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "design_priority_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: design_priority_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: design_priority_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: design_priority_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: design_priority_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: design_priority_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: design_priority_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: design_priority_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: design_priority_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A13760>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: design_priority_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: design_priority_no>>",
        "verbose_name": "design priority no"
    },
    {
        "attname": "design_application_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.design_application_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: design_application_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: design_application_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: design_application_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: design_application_no>>",
        "column": "design_application_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: design_application_no>>",
        "creation_counter": 238,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: design_application_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: design_application_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: design_application_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: design_application_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: design_application_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: design_application_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: design_application_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: design_application_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: design_application_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: design_application_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: design_application_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: design_application_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: design_application_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: design_application_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: design_application_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: design_application_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: design_application_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: design_application_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: design_application_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: design_application_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: design_application_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: design_application_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "design_application_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: design_application_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: design_application_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: design_application_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: design_application_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: design_application_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: design_application_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: design_application_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: design_application_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A134F0>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: design_application_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: design_application_no>>",
        "verbose_name": "design application no"
    },
    {
        "attname": "registration_no",
        "auto_created": false,
        "auto_creation_counter": -28,
        "blank": true,
        "cached_col": "Col(app_design, app.Design.registration_no)",
        "cast_db_type": "<bound method CharField.cast_db_type of <django.db.models.fields.CharField: registration_no>>",
        "check": "<bound method CharField.check of <django.db.models.fields.CharField: registration_no>>",
        "choices": null,
        "class_lookups": {
            "exact": "<class 'django.db.models.lookups.Exact'>",
            "iexact": "<class 'django.db.models.lookups.IExact'>",
            "gt": "<class 'django.db.models.lookups.GreaterThan'>",
            "gte": "<class 'django.db.models.lookups.GreaterThanOrEqual'>",
            "lt": "<class 'django.db.models.lookups.LessThan'>",
            "lte": "<class 'django.db.models.lookups.LessThanOrEqual'>",
            "in": "<class 'django.db.models.lookups.In'>",
            "contains": "<class 'django.db.models.lookups.Contains'>",
            "icontains": "<class 'django.db.models.lookups.IContains'>",
            "startswith": "<class 'django.db.models.lookups.StartsWith'>",
            "istartswith": "<class 'django.db.models.lookups.IStartsWith'>",
            "endswith": "<class 'django.db.models.lookups.EndsWith'>",
            "iendswith": "<class 'django.db.models.lookups.IEndsWith'>",
            "range": "<class 'django.db.models.lookups.Range'>",
            "isnull": "<class 'django.db.models.lookups.IsNull'>",
            "regex": "<class 'django.db.models.lookups.Regex'>",
            "iregex": "<class 'django.db.models.lookups.IRegex'>"
        },
        "clean": "<bound method Field.clean of <django.db.models.fields.CharField: registration_no>>",
        "clone": "<bound method Field.clone of <django.db.models.fields.CharField: registration_no>>",
        "column": "registration_no",
        "concrete": true,
        "contribute_to_class": "<bound method Field.contribute_to_class of <django.db.models.fields.CharField: registration_no>>",
        "creation_counter": 241,
        "db_check": "<bound method Field.db_check of <django.db.models.fields.CharField: registration_no>>",
        "db_collation": null,
        "db_column": null,
        "db_index": false,
        "db_parameters": "<bound method CharField.db_parameters of <django.db.models.fields.CharField: registration_no>>",
        "db_returning": false,
        "db_tablespace": "",
        "db_type": "<bound method Field.db_type of <django.db.models.fields.CharField: registration_no>>",
        "db_type_parameters": "<bound method Field.db_type_parameters of <django.db.models.fields.CharField: registration_no>>",
        "db_type_suffix": "<bound method Field.db_type_suffix of <django.db.models.fields.CharField: registration_no>>",
        "deconstruct": "<bound method CharField.deconstruct of <django.db.models.fields.CharField: registration_no>>",
        "default": "<class 'django.db.models.fields.NOT_PROVIDED'>",
        "default_error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "default_validators": [],
        "description": "String (up to %(max_length)s)",
        "descriptor_class": "<class 'django.db.models.query_utils.DeferredAttribute'>",
        "editable": true,
        "empty_strings_allowed": true,
        "empty_values": [
            null,
            "",
            [],
            [],
            {}
        ],
        "error_messages": {
            "invalid_choice": "Value %(value)r is not a valid choice.",
            "null": "This field cannot be null.",
            "blank": "This field cannot be blank.",
            "unique": "%(model_name)s with this %(field_label)s already exists.",
            "unique_for_date": "%(field_label)s must be unique for %(date_field_label)s %(lookup_type)s."
        },
        "flatchoices": [],
        "formfield": "<bound method CharField.formfield of <django.db.models.fields.CharField: registration_no>>",
        "get_attname": "<bound method Field.get_attname of <django.db.models.fields.CharField: registration_no>>",
        "get_attname_column": "<bound method Field.get_attname_column of <django.db.models.fields.CharField: registration_no>>",
        "get_choices": "<bound method Field.get_choices of <django.db.models.fields.CharField: registration_no>>",
        "get_col": "<bound method Field.get_col of <django.db.models.fields.CharField: registration_no>>",
        "get_db_converters": "<bound method Field.get_db_converters of <django.db.models.fields.CharField: registration_no>>",
        "get_db_prep_save": "<bound method Field.get_db_prep_save of <django.db.models.fields.CharField: registration_no>>",
        "get_db_prep_value": "<bound method Field.get_db_prep_value of <django.db.models.fields.CharField: registration_no>>",
        "get_default": "<bound method Field.get_default of <django.db.models.fields.CharField: registration_no>>",
        "get_filter_kwargs_for_object": "<bound method Field.get_filter_kwargs_for_object of <django.db.models.fields.CharField: registration_no>>",
        "get_internal_type": "<bound method CharField.get_internal_type of <django.db.models.fields.CharField: registration_no>>",
        "get_lookup": "<bound method RegisterLookupMixin.get_lookup of <django.db.models.fields.CharField: registration_no>>",
        "get_lookups": "<bound method RegisterLookupMixin.get_lookups of <class 'django.db.models.fields.CharField'>>",
        "get_pk_value_on_save": "<bound method Field.get_pk_value_on_save of <django.db.models.fields.CharField: registration_no>>",
        "get_prep_value": "<bound method CharField.get_prep_value of <django.db.models.fields.CharField: registration_no>>",
        "get_transform": "<bound method RegisterLookupMixin.get_transform of <django.db.models.fields.CharField: registration_no>>",
        "has_default": "<bound method Field.has_default of <django.db.models.fields.CharField: registration_no>>",
        "help_text": "",
        "hidden": false,
        "is_relation": false,
        "many_to_many": null,
        "many_to_one": null,
        "max_length": 128,
        "merge_dicts": "<function RegisterLookupMixin.merge_dicts at 0x00000279E820D090>",
        "model": "<class 'app.models.modules.Design'>",
        "name": "registration_no",
        "non_db_attrs": [
            "blank",
            "choices",
            "db_column",
            "editable",
            "error_messages",
            "help_text",
            "limit_choices_to",
            "on_delete",
            "related_name",
            "related_query_name",
            "validators",
            "verbose_name"
        ],
        "null": true,
        "one_to_many": null,
        "one_to_one": null,
        "pre_save": "<bound method Field.pre_save of <django.db.models.fields.CharField: registration_no>>",
        "primary_key": false,
        "register_lookup": "<bound method RegisterLookupMixin.register_lookup of <class 'django.db.models.fields.CharField'>>",
        "rel_db_type": "<bound method Field.rel_db_type of <django.db.models.fields.CharField: registration_no>>",
        "related_model": null,
        "remote_field": null,
        "run_validators": "<bound method Field.run_validators of <django.db.models.fields.CharField: registration_no>>",
        "save_form_data": "<bound method Field.save_form_data of <django.db.models.fields.CharField: registration_no>>",
        "select_format": "<bound method Field.select_format of <django.db.models.fields.CharField: registration_no>>",
        "serialize": true,
        "set_attributes_from_name": "<bound method Field.set_attributes_from_name of <django.db.models.fields.CharField: registration_no>>",
        "system_check_deprecated_details": null,
        "system_check_removed_details": null,
        "to_python": "<bound method CharField.to_python of <django.db.models.fields.CharField: registration_no>>",
        "unique": false,
        "unique_for_date": null,
        "unique_for_month": null,
        "unique_for_year": null,
        "validate": "<bound method Field.validate of <django.db.models.fields.CharField: registration_no>>",
        "validators": [
            "<django.core.validators.MaxLengthValidator object at 0x00000279E8A13640>"
        ],
        "value_from_object": "<bound method Field.value_from_object of <django.db.models.fields.CharField: registration_no>>",
        "value_to_string": "<bound method Field.value_to_string of <django.db.models.fields.CharField: registration_no>>",
        "verbose_name": "registration no"
    }
]